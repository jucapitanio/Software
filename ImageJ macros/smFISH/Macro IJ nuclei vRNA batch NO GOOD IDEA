/*
We start by creating a function that can perform all the steps we need to create the necessary files.
This function will get a .dv file, and output a mask for the nuclei (based on dapi staining). Saved as .tif.
This mask will be used to eliminate smFISH signal outside the nuclei in all image channels.
The channels (with only intranuclear signal) are saved separately in .tif files.

THIS WAS NOT A GOOD IDEA FOR THE ARO FISH ANALYSIS, SO DON'T USE THIS CODE. I SAVED IT AS AN EXAMPLE ONLY
*/
function nuc_images(input, output, filename) {
  /*
  Below we will use the Bio-Formats importer plugin to open the images.
  It works best if you create one variable with the location of file to open (newfile) and another with the options for the importer (options).
  */
  newfile = input + filename;
  options = "open=newfile autoscale color_mode=Default split_channels view=[Standard ImageJ] stack_order=XYZCT";
  run("Bio-Formats Importer",options);

  /*
  Now we will use the dapi channel window to create a mask for the nuclei od cells.
  This mask will be added as a selection to the ROI manager so it can be applied to the other channels.
  We will delete anything outside the nuclei mask in all channels.
  Finally, remove the selection for the manager so it can use a new selection on the next image.
  */
  selectWindow(filename + " - C=2");
  run("Z Project...", "projection=[Min Intensity]");
  run("Gaussian Blur...", "sigma=5");
  setOption("BlackBackground", true);
  run("Convert to Mask");
  run("Erode");
  run("Create Selection");
  roiManager("Add");
  selectWindow(filename + " - C=2");
  roiManager("Select", 0);
  setBackgroundColor(0, 0, 0);
  run("Clear Outside", "stack");
  selectWindow(filename + " - C=1");
  roiManager("Select", 0);
  run("Clear Outside", "stack");
  selectWindow(filename + " - C=0");
  roiManager("Select", 0);
  run("Clear Outside", "stack");
  roiManager("Delete");

  /*
  Last, we will save each channel stack as a .tif file along with the mask file created.
  End by closing all windows.
  */
  selectWindow("MIN_" + filename + " - C=2");
  saveAs("Tiff", output + "Mask_" + filename + ".tif");
  selectWindow(filename + " - C=0");
  saveAs("Tiff", output + "cy5_" + filename + ".tif");
  selectWindow(filename + " - C=1");
  saveAs("Tiff", output + "cy3_" + filename + ".tif");
  selectWindow(filename + " - C=2");
  saveAs("Tiff", output + "dapi_" + filename + ".tif");
  close();
  selectWindow("cy3_" + filename + ".tif");
  close();
  selectWindow("cy5_" + filename + ".tif");
  close();
  selectWindow("Mask_" + filename + ".tif");
  close();

}

// Below are the folder were your .dv files are (input) and the folder where you'd like to save the files (output).

input = "C:\\Users\\Juliana\\Documents\\Lab Stuff 2015 2nd sem\\Images\\Jul16_15\\vRNA FISH\\deconv for RF\\Images_original\\";
output = "C:\\Users\\Juliana\\Documents\\Lab Stuff 2015 2nd sem\\Images\\Jul16_15\\vRNA FISH\\deconv for RF\\rootNuclei\\ImageData\\";

// This will iterate the function created above in all the files present in input.
setBatchMode(true);
list = getFileList(input);
for (i = 0; i < list.length; i++)
        nuc_images(input, output, list[i]);
setBatchMode(false);
